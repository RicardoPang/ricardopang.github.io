import{_ as i,c as e,o as t,a3 as s}from"./chunks/framework.BMeDXoj2.js";const u=JSON.parse('{"title":"使用 .gitignore 忽略 Git 仓库中的文件","description":".gitignore 文件在Git中的使用","frontmatter":{"title":"使用 .gitignore 忽略 Git 仓库中的文件","description":".gitignore 文件在Git中的使用"},"headers":[],"relativePath":"components/gitignore.md","filePath":"components/gitignore.md"}'),a={name:"components/gitignore.md"},o=s(`<blockquote><p>使用 <code>.gitignore</code> 文件忽略指定文件</p></blockquote><h2 id="gitignore" tabindex="-1">.gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;.gitignore&quot;">​</a></h2><p>在 Git 中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到 Git 仓库中，例如在 MacOS 系统下面的<code>.DS_Store</code>文件，或者是 Xocde 的操作记录，又或者是 pod 库的中一大串的源代码。这种情况下使用<code>.gitignore</code>就能够在 Git 提交时自动忽略掉这些文件。</p><h2 id="忽略的格式" tabindex="-1">忽略的格式 <a class="header-anchor" href="#忽略的格式" aria-label="Permalink to &quot;忽略的格式&quot;">​</a></h2><ul><li><code>#</code> :此为注释 – 将被 Git 忽略</li><li><code>*.a</code> :忽略所有 <code>.a</code> 结尾的文件</li><li><code>!lib.a</code> : 不忽略 <code>lib.a</code> 文件</li><li><code>/TODO</code> :仅仅忽略项目根目录下的 <code>TODO</code> 文件,不包括 <code>subdir/TODO</code></li><li><code>build/</code> : 忽略 <code>build/</code> 目录下的所有文件</li><li><code>doc/*.txt</code> : 会忽略 <code>doc/notes.txt</code> 但不包括 <code>doc/server/arch.txt</code></li></ul><h2 id="创建方法" tabindex="-1">创建方法 <a class="header-anchor" href="#创建方法" aria-label="Permalink to &quot;创建方法&quot;">​</a></h2><h4 id="从-github-上获取" tabindex="-1">从 <a href="https://github.com/github/gitignore.git" target="_blank" rel="noreferrer">github</a> 上获取 <a class="header-anchor" href="#从-github-上获取" aria-label="Permalink to &quot;从 [github](https://github.com/github/gitignore.git) 上获取&quot;">​</a></h4><p>github 上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取</p><pre><code>https://github.com/github/gitignore.git
</code></pre><h4 id="通过-gitignore-io-创建-推荐" tabindex="-1">通过 <a href="https://www.gitignore.io/" target="_blank" rel="noreferrer">gitignore.io</a> 创建（推荐） <a class="header-anchor" href="#通过-gitignore-io-创建-推荐" aria-label="Permalink to &quot;通过 [gitignore.io](https://www.gitignore.io/) 创建（推荐）&quot;">​</a></h4><h6 id="先自定义终端命令" tabindex="-1">先自定义终端命令： <a class="header-anchor" href="#先自定义终端命令" aria-label="Permalink to &quot;先自定义终端命令：&quot;">​</a></h6><p>macOS 下默认是<code>\\#!/bin/bash</code>：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;function gi() { curl -L -s https://www.gitignore.io/api/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@ ;}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bash_profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bash_profile</span></span></code></pre></div><p>如果是 <code>#!/bin/zsh</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;function gi() { curl -L -s https://www.gitignore.io/api/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@ ;}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.zshrc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.zshrc</span></span></code></pre></div><h6 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h6><p>在当前终端目录下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swift</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span></span></code></pre></div><p>就会针对 Swifit 类型的工程创建 <code>.gitignore</code> 文件。</p>`,19),h=[o];function n(l,r,d,p,c,g){return t(),e("div",null,h)}const F=i(a,[["render",n]]);export{u as __pageData,F as default};
