import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.DMj_wZv2.js";const E=JSON.parse('{"title":"前端工程化","description":"Eslint+Prettier+husky+commitlint+lint+staged规范前端工程代码规范","frontmatter":{"title":"前端工程化","description":"Eslint+Prettier+husky+commitlint+lint+staged规范前端工程代码规范"},"headers":[],"relativePath":"components/engineering.md","filePath":"components/engineering.md"}'),n={name:"components/engineering.md"},l=t(`<blockquote><p>记录自己的前端工作流，总结一份自己的前端工作流搭建流程，方便以后使用，创建一个简单的模板。</p></blockquote><h2 id="vue3-项目框架搭建" tabindex="-1">Vue3 项目框架搭建 <a class="header-anchor" href="#vue3-项目框架搭建" aria-label="Permalink to &quot;Vue3 项目框架搭建&quot;">​</a></h2><h4 id="_1-使用vite脚手架初始化项目" tabindex="-1">1. 使用<code>Vite</code>脚手架初始化项目 <a class="header-anchor" href="#_1-使用vite脚手架初始化项目" aria-label="Permalink to &quot;1. 使用\`Vite\`脚手架初始化项目&quot;">​</a></h4><blockquote><p><a href="https://cn.vitejs.dev/guide/" target="_blank" rel="noreferrer">vite 官网</a></p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue@latest</span></span></code></pre></div><p><img src="https://p.ipic.vip/p0lyd4.png" alt="image-20240805140002333"></p><h4 id="_2-项目目录结构" tabindex="-1">2. 项目目录结构 <a class="header-anchor" href="#_2-项目目录结构" aria-label="Permalink to &quot;2. 项目目录结构&quot;">​</a></h4><p><img src="https://p.ipic.vip/fqmffz.png" alt="image-20240811103917787"></p><h4 id="_3-css-样式" tabindex="-1">3. CSS 样式 <a class="header-anchor" href="#_3-css-样式" aria-label="Permalink to &quot;3. CSS 样式&quot;">​</a></h4><ul><li>normalize.css</li><li>reset.css</li></ul><p><img src="https://p.ipic.vip/90z1zk.png" alt="image-20240811104918736"></p><h4 id="_4-路由配置" tabindex="-1">4. 路由配置 <a class="header-anchor" href="#_4-路由配置" aria-label="Permalink to &quot;4. 路由配置&quot;">​</a></h4><p><img src="https://p.ipic.vip/fbm4jc.png" alt="image-20240811105300818"></p><h4 id="_5-状态管理" tabindex="-1">5. 状态管理 <a class="header-anchor" href="#_5-状态管理" aria-label="Permalink to &quot;5. 状态管理&quot;">​</a></h4><ul><li>vuex: 目前依然使用较多的状态管理库</li><li>pinia: 强烈推荐, 未来趋势的状态管理库</li></ul><p><img src="https://p.ipic.vip/oubhlc.png" alt="image-20240811105509846"></p><h4 id="_6-网络请求封装-axios" tabindex="-1">6. 网络请求封装 axios <a class="header-anchor" href="#_6-网络请求封装-axios" aria-label="Permalink to &quot;6. 网络请求封装 axios&quot;">​</a></h4><p><img src="https://p.ipic.vip/mz6sk0.png" alt="image-20240811105643020"></p><h4 id="_7-环境变量配置" tabindex="-1">7. 环境变量配置 <a class="header-anchor" href="#_7-环境变量配置" aria-label="Permalink to &quot;7. 环境变量配置&quot;">​</a></h4><p><a href="https://cn.vitejs.dev/guide/env-and-mode.html#modes" target="_blank" rel="noreferrer">https://cn.vitejs.dev/guide/env-and-mode.html#modes</a></p><ul><li>Vite 的环境变量：开发环境 <code>dev</code> 、生产环境，<code>prod</code></li><li>Vite 在一个特殊的 import.meta.env 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量： <ul><li>import.meta.env.MODE: {string} 应用运行的模式。</li><li>import.meta.env.PROD: {boolean} 应用是否运行在生产环境。</li><li>import.meta.env.DEV: {boolean} 应用是否运行在开发环境 (永远与 import.meta.env.PROD 相反)。</li><li>import.meta.env.SSR: {boolean} 应用是否运行在 server 上。</li></ul></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>新建文件</span></span>
<span class="line"><span>.env</span></span>
<span class="line"><span>.env.development</span></span>
<span class="line"><span>.env.production</span></span>
<span class="line"><span></span></span>
<span class="line"><span>项目配置的内容</span></span>
<span class="line"><span>文件内容 VITE_URL=dev</span></span>
<span class="line"><span>文件内容 VITE_URL=prod</span></span></code></pre></div><p><img src="https://p.ipic.vip/hfc1ve.png" alt="image-20240811112140025"></p><h4 id="_8-element-plus-集成" tabindex="-1">8. Element-Plus 集成 <a class="header-anchor" href="#_8-element-plus-集成" aria-label="Permalink to &quot;8. Element-Plus 集成&quot;">​</a></h4><ul><li>安装：<a href="https://element-plus.org/zh-CN/guide/installation.html" target="_blank" rel="noreferrer">https://element-plus.org/zh-CN/guide/installation.html</a></li><li>导入：<a href="https://element-plus.org/zh-CN/guide/quickstart.html" target="_blank" rel="noreferrer">https://element-plus.org/zh-CN/guide/quickstart.html</a></li></ul><h2 id="集成-editorconfig-配置" tabindex="-1">集成 editorconfig 配置 <a class="header-anchor" href="#集成-editorconfig-配置" aria-label="Permalink to &quot;集成 editorconfig 配置&quot;">​</a></h2><blockquote><p>EditorConfig 为不同编辑器上处理同一个项目的多个开发人员维护一致的编码风格</p></blockquote><p><a href="http://editorconfig.org" target="_blank" rel="noreferrer">http://editorconfig.org</a></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .editorconfig</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root = true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[*] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 表示所有文件适用</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">charset = utf-8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置文件字符集为 utf-8</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">indent_style = space</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 缩进风格（tab | space）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">indent_size = 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 缩进大小</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">end_of_line = lf</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 控制换行类型(lf | cr | crlf)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">trim_trailing_whitespace = true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 去除行尾的任意空白字符</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">insert_final_newline = true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 始终在文件末尾插入一个新行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.md] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 表示仅 md 文件适用以下规则</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">max_line_length = off</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">trim_trailing_whitespace = false</span></span></code></pre></div><p>VSCode 安装一个插件：EditorConfig for VS Code</p><p><img src="https://p.ipic.vip/10aza2.png" alt="image-20240403170119374"></p><h2 id="使用-prettier-工具" tabindex="-1">使用 prettier 工具 <a class="header-anchor" href="#使用-prettier-工具" aria-label="Permalink to &quot;使用 prettier 工具&quot;">​</a></h2><blockquote><p>Prettier 代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Vue 等语言。</p></blockquote><p><a href="https://www.prettier.cn/" target="_blank" rel="noreferrer">https://www.prettier.cn/</a></p><ol><li><p>安装 Prettier</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div></li><li><p>配置.prettierrc 文件</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;useTabs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tabWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;printWidth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;singleQuote&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;trailingComma&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;semi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>useTabs：使用 tab 缩进还是空格缩进，选择 false</li><li>tabWidth：tab 是空格的情况下，是几个空格，选择 2 个</li><li>printWidth：当前字符的长度，推荐 80</li><li>singleQuote：使用单引号还是双引号，推荐单引号</li><li>trailingComma：在多行输入的尾逗号是否添加</li><li>semi： 语句末尾是否要加分号，默认为 true</li></ul></li><li><p>创建.prettierignore 忽略文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/dist/*</span></span>
<span class="line"><span>.local</span></span>
<span class="line"><span>.output.js</span></span>
<span class="line"><span>/node_modules/**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**/*.svg</span></span>
<span class="line"><span>**/*.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/public/*</span></span></code></pre></div></li><li><p>VSCode 安装一个插件：Prettier</p><p><img src="https://p.ipic.vip/4e02ae.png" alt="image-20240403191852801"></p></li><li><p>VSCode 中的配置</p><ul><li><p>settings =&gt; format on save =&gt; 勾选上</p></li><li><p>settings =&gt; editor default format =&gt; 选择 prettier</p><p>![image-20240810123731164](../../../Library/Application Support/typora-user-images/image-20240810123731164.png)</p></li></ul></li><li><p>测试 Prettier 是否生效</p><ul><li><p>在代码中保存代码</p></li><li><p>配置一次性修改的命令：在 package.json 中配置一个 scripts</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier --write .&quot;</span></span></code></pre></div></li></ul></li></ol><h2 id="使用-eslint-检测" tabindex="-1">使用 ESLint 检测 <a class="header-anchor" href="#使用-eslint-检测" aria-label="Permalink to &quot;使用 ESLint 检测&quot;">​</a></h2><blockquote><p><code>eslint</code>运行代码前就可以发现一些语法错误和潜在的 bug，目标是保证团队代码的一致 性和避免错误</p></blockquote><blockquote><p>区别联系：<code>eslint</code>偏向于把控项目的代码质量，而<code>prettier</code>更偏向于统一项目的编码 风格。<code>eslint</code>有小部分的代码格式化功能，一般和<code>prettier</code>结合使用</p></blockquote><p><a href="https://zh-hans.eslint.org/docs/latest/use/getting-started" target="_blank" rel="noreferrer">https://zh-hans.eslint.org/docs/latest/use/getting-started</a></p><ol><li><p>配置 ESLint 环境</p><ul><li><p>创建项目时选择 ESLint，Vue 会默认配置</p></li><li><p>配置脚本</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在package.json，配置script脚本，项目安装eslint配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;lint:create&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eslint --init&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint:create</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 会自动创建一个.eslintrc.cjs文件</span></span></code></pre></div></li></ul></li><li><p>VSCode 需要安装 ESLint 插件</p><p><img src="https://p.ipic.vip/eprkd3.png" alt="image-20240403192629564"></p></li><li><p>解决 ESLint 和 Prettier 冲突的问题</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-plugin-prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-config-prettier</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><p>添加 Prettier 插件</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># .eslintrc.cjs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">extends: [</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &#39;plugin:vue/vue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">-essential&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &#39;eslint:recommended&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &#39;@vue/eslint-config-typescript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &#39;@vue/eslint-config-prettier&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">  &#39;plugin:prettier/recommended&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li><li><p>VSCode 中 ESLint 配置</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint.lintTask.enable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint.alwaysShowStatus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint.validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;javascriptreact&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;typescript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;typescriptreact&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;editor.codeActionsOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;source.fixAll.eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div></li></ol><h2 id="git-husky-和-eslint" tabindex="-1">git Husky 和 eslint <a class="header-anchor" href="#git-husky-和-eslint" aria-label="Permalink to &quot;git Husky 和 eslint&quot;">​</a></h2><blockquote><p>问题：虽然项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 问题解决掉了</p></blockquote><ol><li><p>husky 是一个 git hook 工具，帮助触发 git 提交的每个阶段：pre-commit、commit-msg、pre-push</p><ul><li>保证代码仓库中的代码都是符合 eslint 规范</li><li>需要组员执行 <strong>git commit</strong> 命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进修复</li></ul></li><li><p>使用</p><ul><li><p>使用自动配置命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky-init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>这里会做三件事</p><ol><li><p>安装 husky 相关依赖</p><p><img src="https://p.ipic.vip/i8f9v3.png" alt="image-20240811123013952"></p></li><li><p>在项目目录下创建 <strong>.husky</strong> 文件夹</p><p><img src="https://p.ipic.vip/chao70.png" alt="image-20240811122903035"></p></li><li><p>在 package.json 中添加一个脚本</p><p><img src="https://p.ipic.vip/xt22n1.png" alt="image-20240811123107570"></p></li></ol><p>接下来，我们需要去完成一个操作：进行 commit 时，执行 lint 脚本（这个时候执行 git commit 的时候会自动对代码进行 lint 校验）</p><p><img src="https://p.ipic.vip/svrnx8.png" alt="image-20240403215146797"></p></li></ul></li></ol><h2 id="git-commit-规范" tabindex="-1">git commit 规范 <a class="header-anchor" href="#git-commit-规范" aria-label="Permalink to &quot;git commit 规范&quot;">​</a></h2><ol><li><p>代码提交风格</p><blockquote><p>通常我们的 git commit 会按照统一的⻛格来提交，这样可以快速定位每次提交的内容，方便之后对版本</p><p>进行控制。</p></blockquote><p><img src="https://p.ipic.vip/xpr6yw.png" alt="image-20240403215814390"></p><p>但是每次手动编写这些比较麻烦，我们可以使用一个工具 Commitizen，它是一个帮助我们编写规范 commit message 的工具</p><ul><li>安装 Commitizen</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><ul><li>安装 cz-conventional-changelog， 并且初始化 cz-conventional-changelog</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-conventional-changelog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-exact</span></span></code></pre></div><p>上面的命令帮助我们安装 cz-conventional-changelog</p><p><img src="https://p.ipic.vip/scosye.png" alt="image-20240811123627255"></p><p>并且在 package.json 中进行配置：</p><p><img src="https://p.ipic.vip/e6fg2m.png" alt="image-20240811123709851"></p><p>这个时候我们提交代码需要使用 <code>npx cz</code>：</p><ul><li>第一步选择 type，本次更新的类型</li></ul><table tabindex="0"><thead><tr><th>Type</th><th>作用</th></tr></thead><tbody><tr><td>feat</td><td>新增特性 (feature)</td></tr><tr><td>fix</td><td>修复 Bug(bug fix)</td></tr><tr><td>docs</td><td>修改文档 (documentation)</td></tr><tr><td>style</td><td>代码格式修改(white-space, formatting, missing semi colons, etc)</td></tr><tr><td>refactor</td><td>代码重构(refactor)</td></tr><tr><td>perf</td><td>改善性能(A code change that improves performance)</td></tr><tr><td>test</td><td>测试(when adding missing tests)</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具(比如更改测试环境)</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><ul><li>第二步选择本次修改的范围（作用域）</li></ul><p><img src="https://p.ipic.vip/rsm813.png" alt="image-20240403220648854"></p><ul><li><p>第三步选择提交的信息</p><p><img src="https://p.ipic.vip/zo4ty6.png" alt="image-20240403220701023"></p></li><li><p>第四步提交详细的描述信息</p><p><img src="https://p.ipic.vip/o91mki.png" alt="image-20240403220710658"></p></li><li><p>第五步是否是一次重大的更改</p><p><img src="https://p.ipic.vip/eyq12y.png" alt="image-20240403220719539"></p></li><li><p>第六步是否影响某个 open issue</p><p><img src="https://p.ipic.vip/xnxnyy.png" alt="image-20240403220729788"></p></li></ul><p>我们也可以在 scripts 中构建一个命令来执行 cz</p><p><img src="https://p.ipic.vip/xa2q1a.png" alt="image-20240811124043305"></p></li><li><p>代码提交验证</p><blockquote><p>解决不按照 cz 规范提交，依然通过 git commit 按照不规范的格式来提交代码应该怎么解决？</p></blockquote><ul><li><p>通过 commitlint 来限制提交</p><ol><li><p>安装</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/config-conventional</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div></li><li><p>根目录创建 commitlint.config.js 文件，配置 commitlint</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@commitlint/config-conventional&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 husky 生成 commit-msg 文件，验证提交信息</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/commit-msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npx --no-install commitlint --edit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div></li></ol></li></ul></li></ol><h3 id="stylelint钩子" tabindex="-1"><code>stylelint</code>钩子 <a class="header-anchor" href="#stylelint钩子" aria-label="Permalink to &quot;\`stylelint\`钩子&quot;">​</a></h3><blockquote><p>CSS 检查器(linter)，帮助我们规避 CSS 代码中的错误并保持一致的编码风格</p></blockquote><p><a href="https://stylelint.io/user-guide/get-started" target="_blank" rel="noreferrer">https://stylelint.io/user-guide/get-started</a></p><ol><li>安装 vscode 插件，Stylelint</li><li>修改 settings.json，添加下面代码</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.codeActionsOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;source.fixAll.stylelint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;stylelint.validate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;less&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>安装项目需要的校验库，（常见的规则包）</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint-config-standard</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><ol start="4"><li>根目录下建立 .stylelintrc.cjs</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stylelint-config-standard&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一个标准样式库，也可以自动添加一些样式规则在 stylelintrc.cjs 文件里面</p><ol start="5"><li><p>执行 npx stylelint &quot;*<em>/</em>.css&quot; 发现项目里面的 style.css 全局样式文件，报错很多 具体到对应的文件，按 ctrl+s 就会执行自动格式化我们在 setting.json 里面添加的语句（第 2 步）</p></li><li><p>增加 vue 里面的样式支持（附带 less 和 scss 的支持）</p></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对less的支持</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint-less</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint-config-recommended-less</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对scss的支持</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint-scss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint-config-recommended-scss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postcss</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对postcss的支持</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postcss-html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint-config-standard-scss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stylelint-config-recommended-vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postcss</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> （对vue里面样式的支持，vue的样式需要依赖前面这个库）</span></span></code></pre></div><p>Vite 也同时提供了对 .scss .sass .less .styl .stylus 文件的内置支持，不需要再安装特定插件和预处理器</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;stylelint-config-standard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;stylelint-config-recommended-less&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;stylelint-config-recommended-scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;stylelint-config-recommended-vue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scss的extends</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;stylelint-config-standard-scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;stylelint-config-recommended-vue/scss&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol start="7"><li>package.json 文件添加</li></ol><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lint:css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylelint **/*.{vue,css,sass,scss} --fix&quot;</span></span></code></pre></div><ol start="8"><li>给 vite 添加插件</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-plugin-stylelint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><p>修改 vite.config.js 文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stylelitPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-stylelint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stylelitPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span></code></pre></div><ol start="9"><li>添加到 lint-staged 里面，在暂存区对文件进行格式化</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;*.{js,jsx,vue,ts,tsx}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;npm run lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;npm run prettier-format&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;*.{vue,less,css,scss,sass}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;npm run lint:css&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="10"><li><p>添加一个.stylelintignore 文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/public/*</span></span></code></pre></div></li><li><p>.stylelintrc.cjs 内部的其他配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;stylelint-config-standard&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;stylelint-config-recommended-vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  overrides: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 若项目中存在scss文件，添加以下配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      files: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*.scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;**/*.scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      customSyntax: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stylelint-config-recommended-scss&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 若项目中存在less文件，添加以下配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      files: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*.less&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;**/*.less&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      customSyntax: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postcss-less&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stylelint-config-recommended-less&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="补充" tabindex="-1">补充： <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充：&quot;">​</a></h2><h4 id="_1-技术栈参考" tabindex="-1">1. 技术栈参考 <a class="header-anchor" href="#_1-技术栈参考" aria-label="Permalink to &quot;1. 技术栈参考&quot;">​</a></h4><table tabindex="0"><thead><tr><th>技术栈介绍</th><th></th></tr></thead><tbody><tr><td>开发工具</td><td>Visual Studio Code</td></tr><tr><td>编程语言</td><td>TypeScript 4.x + JavaScript</td></tr><tr><td>构建工具</td><td>Vite 3.x / Webpack5.x</td></tr><tr><td>前端框架</td><td>Vue 3.x + setup</td></tr><tr><td>路由工具</td><td>Vue Router 4.x</td></tr><tr><td>状态管理</td><td>Vuex 4.x / Pinia</td></tr><tr><td>UI 框架</td><td>Element Plus</td></tr><tr><td>可视化</td><td>Echart5.x</td></tr><tr><td>工具库</td><td>@vueuse/core + dayjs + countup.js 等等 <a href="https://www.bestblogs.dev/article/e0b092" target="_blank" rel="noreferrer">前端库推荐</a></td></tr><tr><td>CSS 预编译</td><td>Sass / Less</td></tr><tr><td>HTTP 工具</td><td>Axios</td></tr><tr><td>Git Hook 工具</td><td>husky</td></tr><tr><td>代码规范</td><td>EditorConfig + Prettier + ESLint</td></tr><tr><td>提交规范</td><td>Commitizen + Commitlint</td></tr><tr><td>自动部署</td><td>Centos + Jenkins + Nginx</td></tr></tbody></table><h4 id="_2-项目打包和自动化部署" tabindex="-1">2. 项目打包和自动化部署 <a class="header-anchor" href="#_2-项目打包和自动化部署" aria-label="Permalink to &quot;2. 项目打包和自动化部署&quot;">​</a></h4><ul><li><p>项目部署和 DevOps</p><ul><li><p>DevOps 是 Development 和 Operations 两个词的结合，将开发和运维结合起来的模式：</p><p><img src="https://p.ipic.vip/fbttnw.jpg" alt="17233517603573"></p></li><li><p>持续集成和持续交付</p><p>伴随着 DevOps 一起出现的两个词就是持续集成和持续交付(部署)：</p><ul><li>CI 是 Continuous Integration（持续集成）；</li><li>CD 是两种翻译：Continuous Delivery（持续交付）或 Continuous Deployment（持续部署）；</li></ul></li><li><p>自动化部署流程</p><p><img src="https://p.ipic.vip/7lesv6.jpg" alt="17233517603588"></p></li></ul></li><li><p>购买云服务器</p><ul><li><a href="https://aliyun.com/" target="_blank" rel="noreferrer">https://aliyun.com/</a></li></ul></li><li><p>搭建服务器环境</p><ol><li><p>jenkins 自动化部署</p><ul><li>安装 Java 环境</li><li>安装 Jenkins</li><li>Jenkins 用户</li><li>Jenkins 配置</li><li>Jenkins 任务</li></ul></li><li><p>nginx 安装和配置</p><ul><li><p>安装 nginx</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span></code></pre></div></li><li><p>配置 nginx</p><ul><li><p>nginx 配置文件目录</p><p>/etc/nginx/nginx.conf</p></li><li><p>我们这里主要配置 nginx 的用户和默认访问目录（配置用户：）</p><p>![17233517603844](../../../Documents/RicardoPang/前端系统课完结/000 资料/11_阶段十一-Vue3+TS 项目实战/11-阶段十一-Vue3+TS 后台系统实战/Day10/笔记/assets/17233517603844.jpg)</p></li><li><p>通过 Linux 命令创建文件夹和文件：</p></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 通过Linux命令创建文件夹和文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/mall_cms</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/mall_cms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span></span></code></pre></div><ul><li><p>配置访问目录：</p><p><img src="https://p.ipic.vip/rxqtap.jpg" alt="17233517603861"></p></li></ul></li></ul></li></ol></li></ul><h4 id="_3-动态路由" tabindex="-1">3. 动态路由 <a class="header-anchor" href="#_3-动态路由" aria-label="Permalink to &quot;3. 动态路由&quot;">​</a></h4><blockquote><p>根据用户的权限信息，动态的添加路由（而不是一次性的注册所有的路由）</p></blockquote><ol><li><p>基于角色（Role）的动态路由管理</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> roles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;superadmin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [所有的路由] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router.main.children</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [一部分路由] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router.main.children</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [少部分路由] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router.main.children</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 重新发布</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">后端返回这个对象（json数据，后端必须组织好这个json）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 弊端：每增加一个角色，都要增加key/value</span></span></code></pre></div></li><li><p>基于菜单（Menu）的动态路由管理</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userMenus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 动态展示菜单</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">系统总览</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">核心技术</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用户管理、角色管理</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 登录接口请求的三个内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. token</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 用户信息：角色信息（role对象）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 菜单信息</span></span></code></pre></div></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>项目搭建</li><li>项目打包和自动化部署</li><li>源码: <a href="https://github.com/RicardoPang/pf-vue3-ts-template" target="_blank" rel="noreferrer">https://github.com/RicardoPang/pf-vue3-ts-template</a></li></ol>`,78),p=[l];function e(h,k,d,r,o,c){return a(),i("div",null,p)}const u=s(n,[["render",e]]);export{E as __pageData,u as default};
